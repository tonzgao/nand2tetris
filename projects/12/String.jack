// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array arr;
    field int length, max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let length = 0;
      let max = maxLength;
      if (max = 0) {
        let max = 1;
      }
      let arr = Array.new(max);      
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do arr.dispose();
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let arr[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (length < max) {
        let arr[length] = c;
        let length = length + 1;
      }
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (length > 0) {
        let length = length - 1;
      }
      return;
    }

    function int _charInt(char c) {
      return c - 48;
    }

    method int _intValue(int i) {
      var int val;
      while (i < length) {
        let val = val * 10 + String._charInt(arr[i]);
        let i = i + 1;
      }
      return val;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int val, i;
      let i = 1;
      if ((length = 0) | ~(arr[0] = 45)) {
        let i = 0;
      }
      let val = _intValue(i);
      if (i = 0) {
        return val;
      }
      return -val;
    }

    function char _charValue(int i) {
      return i + 48;
    }

    method void _setInt(int val) {
      var int lastDigit;
      var char c;

      if (val < 10) {
        do appendChar(String._charValue(val));
      } else {
        let lastDigit = val / 10;
        let c = String._charValue(val - (lastDigit * 10));
        do _setInt(lastDigit);
        do appendChar(c);
      }
      return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      let length = 0;
      if (val < 0) {
        let arr[0] = 45;
        let length = length + 1;
        let val = -val;
      }
      do _setInt(val);
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
